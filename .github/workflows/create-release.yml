name: Create Release

on:
    # Note that this will not work correctly for commits that are not tags.
    push:
        tags:
        - 'v*.*.*'

jobs:
    Windows:
        runs-on: windows-2022

        strategy:
            matrix:
                dub-arch: [x86, x86_64]
                build-type: [betterC-release-nobounds]

        steps:
        - name: Start Time
          id: start-time
          run: |
            $current_time = php -r "echo (new DateTimeImmutable('now', new DateTimeZone('UTC')))->format('Y-m-d H:i:sP');"
            echo $current_time;
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'start-time=${current_time}'.PHP_EOL, FILE_APPEND);";

        - name: Set asset base_name
          id: init-asset-name
          run: |
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'asset_base_name='.preg_replace('/^[^\/]+\//u', '', getenv('GITHUB_REPOSITORY')).'-'.str_replace('refs/tags/v', '', getenv('GITHUB_REF')).'-windows-${{ matrix.dub-arch }}'.PHP_EOL, FILE_APPEND);";
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'asset_base_name-x86='.preg_replace('/^[^\/]+\//u', '', getenv('GITHUB_REPOSITORY')).'-'.str_replace('refs/tags/v', '', getenv('GITHUB_REF')).'-windows-x86'.PHP_EOL, FILE_APPEND);";
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'asset_base_name-x86_64='.preg_replace('/^[^\/]+\//u', '', getenv('GITHUB_REPOSITORY')).'-'.str_replace('refs/tags/v', '', getenv('GITHUB_REF')).'-windows-x86_64'.PHP_EOL, FILE_APPEND);";

        - name: Init get-dlang
          run: |
            mkdir ~/get-dlang;
            cd ~/get-dlang;
            git init;
            git remote add origin https://gitlab.com/dokutoku/get-dlang.git;
            git config --local core.sparsecheckout true;
            git config --local core.autocrlf false;

        - name: Fetch get-dlang
          run: |
            cd ~/get-dlang;
            echo '/ldc2-version.txt' >> '.git/info/sparse-checkout';
            echo '/template/powershell/install-ldc2.ps1' >> '.git/info/sparse-checkout';
            echo '/ldc2-version.txt.sig' >> '.git/info/sparse-checkout';
            echo '/template/powershell/install-ldc2.ps1.sig' >> '.git/info/sparse-checkout';
            git fetch --depth=1 origin master;

        - name: Reset get-dlang
          run: |
            cd ~/get-dlang;
            git reset --hard origin/master;

        - name: Show latest commit of get-dlang
          run: |
            cd ~/get-dlang;
            git log -1;

        - name: Show get-dlang hashes
          run: |
            cd ~/get-dlang;
            (Get-ChildItem -Recurse -File).FullName | ForEach-Object { openssl sha512 $_;}

        - name: Verify get-dlang files
          run: |
            cd ~/get-dlang;
            Write-Output "-----BEGIN PUBLIC KEY-----`nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2Mgmj1IMcTe4ZD0nH5Hj`nHTHdcj2S9I8eIpSYl0DdPGzQcLN06eOX+n4MhOo886NQTfBATVAjyGZy500/8JT3`n7wk/we8yRcxAzW18GjUtqiLW8nvSK7tsqPAO8AWJNldYKwM3xTNo0hZW3G5xlkSw`n0ixMlHTffQ2JxPv4xDgBlKUAndzGIPHGhPiPnPbOOS5tOYaWLk3wtXERJpnv4chx`nCNgJc+uY2RTZWQDLCfjJAi4kce+8lkxaIHHSUrRRtjHdTTvPVCg9EWaX53u8MAFf`nf2S9+6+CdrvKe3+IOppI5cfFZtw4rLWqhrg5tVI7JLIVjx2ioZ5cvR6tzNKKGJcw`nD71vrqGWY6BuGRCaVOGAL/grmw3p4EPGPyxmDCsAsWztdWx9EyHNKtI8zfCFEWBx`noGDHjMYUEtF+acVJAhAb7dqgQ8RTebIuQipxlpSLC7BZMHm72SE2TqixIWLSsgAJ`n7NMv0PhReU+payF+3JsKgZRXkIaD/hgdh/Lz2Cr5iEOKAes1Rh2j6Wx9BYrY7Sbi`ncOfOXduCKQ04siLr1JGt8ZdsmCRhM7GavgtF+WsZav1kCHotVDsVJD1VOQOIdxMQ`n1i2AFC69JTIl395UtO4MaKxNO8lbTF9lefOjp80q+HailSbkJpOvrRBG1S3k5PmE`n3d9rSpiJtcLimKRfGrdYh68CAwEAAQ==`n-----END PUBLIC KEY-----" | Out-File public.pem -Encoding ascii;
            (Get-ChildItem -Recurse -File -include *.ps1,*.sh,*.conf,*.yml,*.txt).FullName | ForEach-Object { openssl dgst -sha512 -verify public.pem -signature $_'.sig' $_; }

        - name: Dlang versions
          id: dlang-versions
          run: |
            cd ~/;
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'dlang_versions='.trim(file_get_contents('./get-dlang/ldc2-version.txt')).PHP_EOL, FILE_APPEND);";

        - name: Installer-cache
          uses: actions/cache@v3
          with:
              path: |
                C:\cache

              key: |
                windows-dlang-${{ steps.dlang-versions.outputs.dlang_versions }}

        - name: Install ldc2
          run: |
            cd ~/;
            Powershell -ExecutionPolicy Bypass -File get-dlang/template/powershell/install-ldc2.ps1;

        - name: Set PATH
          run: |
            php -r "file_put_contents(getenv('GITHUB_PATH'), 'C:'.DIRECTORY_SEPARATOR.'ldc2'.DIRECTORY_SEPARATOR.'bin'.PHP_EOL, FILE_APPEND);";

        - name: Show ldc2 versions
          run: |
            C:\ldc2\bin\ldc2.exe --version
            C:\ldc2\bin\dub.exe --version

        - name: Checkout
          uses: actions/checkout@v3

        - name: x86 create .bat
          if: ${{ (matrix.dub-arch == 'x86') }}
          shell: cmd
          run: |
            echo call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86 -vcvars_spectre_libs=spectre > vc_init.bat

        - name: x64 create .bat
          if: ${{ (matrix.dub-arch != 'x86') }}
          shell: cmd
          run: |
            echo call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 -vcvars_spectre_libs=spectre > vc_init.bat

        - name: ldc2 build library
          shell: cmd
          run: |
            set __VSCMD_ARG_NO_LOGO=1
            call vc_init.bat
            dub build --force --combined --build-mode=allAtOnce --config=library --arch=${{ matrix.dub-arch }} --build=${{ matrix.build-type }} --compiler=C:\ldc2\bin\ldc2.exe

        - name: ldc2 build doc
          shell: cmd
          run: |
            set __VSCMD_ARG_NO_LOGO=1
            call vc_init.bat
            dub build --force --combined --build-mode=allAtOnce --config=library --arch=${{ matrix.dub-arch }} --build=docs --compiler=C:\ldc2\bin\ldc2.exe

        - name: Create Windows archive
          run: |
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }};
            mkdir '${{ steps.init-asset-name.outputs.asset_base_name }}\docs';
            mkdir '${{ steps.init-asset-name.outputs.asset_base_name }}\include';
            mkdir '${{ steps.init-asset-name.outputs.asset_base_name }}\lib';
            robocopy /e /s 'docs\' '${{ steps.init-asset-name.outputs.asset_base_name }}\docs\';
            robocopy /e /s 'include\' '${{ steps.init-asset-name.outputs.asset_base_name }}\include\';
            robocopy /e /s 'lib\' '${{ steps.init-asset-name.outputs.asset_base_name }}\lib\';
            cp 'LICENSE' '${{ steps.init-asset-name.outputs.asset_base_name }}\';
            cp 'README.md' '${{ steps.init-asset-name.outputs.asset_base_name }}\';
            7z a '${{ steps.init-asset-name.outputs.asset_base_name }}.zip' ${{ steps.init-asset-name.outputs.asset_base_name }};

        - name: Upload artifact
          uses: actions/upload-artifact@v3
          with:
              path: |
                ${{ steps.init-asset-name.outputs.asset_base_name }}.zip

        outputs:
            asset_name-x86: ${{ steps.init-asset-name.outputs.asset_base_name-x86 }}.zip
            asset_name-x86_64: ${{ steps.init-asset-name.outputs.asset_base_name-x86_64 }}.zip

    MacOS:
        runs-on: macos-latest

        strategy:
            matrix:
                dub-arch: [x86_64]
                build-type: [release-nobounds]

        steps:
        - name: Start Time
          id: start-time
          run: |
            current_time=`php -r "echo (new DateTimeImmutable('now', new DateTimeZone('UTC')))->format('Y-m-d H:i:sP');"`;
            echo $current_time;
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'start-time=${current_time}'.PHP_EOL, FILE_APPEND);";

        - name: Set asset base name
          id: init-asset-name
          run: |
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'asset_base_name='.preg_replace('/^[^\/]+\//u', '', getenv('GITHUB_REPOSITORY')).'-'.str_replace('refs/tags/v', '', getenv('GITHUB_REF')).'-osx-${{ matrix.dub-arch }}'.PHP_EOL, FILE_APPEND);";
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'asset_base_name-x86_64='.preg_replace('/^[^\/]+\//u', '', getenv('GITHUB_REPOSITORY')).'-'.str_replace('refs/tags/v', '', getenv('GITHUB_REF')).'-osx-x86_64'.PHP_EOL, FILE_APPEND);";

        - name: Init get-dlang
          run: |
            mkdir ~/get-dlang;
            cd ~/get-dlang;
            git init;
            git remote add origin https://gitlab.com/dokutoku/get-dlang.git;
            git config --local core.sparsecheckout true;
            git config --local core.autocrlf false;

        - name: Fetch get-dlang
          run: |
            cd ~/get-dlang;
            echo '/ldc2-version.txt' >> '.git/info/sparse-checkout';
            echo '/template/shell/get-ldc2/get-ldc2-osx-${{ matrix.dub-arch }}.sh' >> '.git/info/sparse-checkout';
            echo '/ldc2-version.txt.sig' >> '.git/info/sparse-checkout';
            echo '/template/shell/get-ldc2/get-ldc2-osx-${{ matrix.dub-arch }}.sh.sig' >> '.git/info/sparse-checkout';
            git fetch --depth=1 origin master;

        - name: Reset get-dlang
          run: |
            cd ~/get-dlang;
            git reset --hard origin/master;

        - name: Show latest commit of get-dlang
          run: |
            cd ~/get-dlang;
            git log -1;

        - name: Show get-dlang hashes
          run: |
            cd ~/get-dlang;
            find './' -type f | grep --regexp=^\.//\.git/ --invert-match | xargs openssl sha512;

        - name: Verify get-dlang files
          run: |
            cd ~/get-dlang;
            echo -e "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2Mgmj1IMcTe4ZD0nH5Hj\nHTHdcj2S9I8eIpSYl0DdPGzQcLN06eOX+n4MhOo886NQTfBATVAjyGZy500/8JT3\n7wk/we8yRcxAzW18GjUtqiLW8nvSK7tsqPAO8AWJNldYKwM3xTNo0hZW3G5xlkSw\n0ixMlHTffQ2JxPv4xDgBlKUAndzGIPHGhPiPnPbOOS5tOYaWLk3wtXERJpnv4chx\nCNgJc+uY2RTZWQDLCfjJAi4kce+8lkxaIHHSUrRRtjHdTTvPVCg9EWaX53u8MAFf\nf2S9+6+CdrvKe3+IOppI5cfFZtw4rLWqhrg5tVI7JLIVjx2ioZ5cvR6tzNKKGJcw\nD71vrqGWY6BuGRCaVOGAL/grmw3p4EPGPyxmDCsAsWztdWx9EyHNKtI8zfCFEWBx\noGDHjMYUEtF+acVJAhAb7dqgQ8RTebIuQipxlpSLC7BZMHm72SE2TqixIWLSsgAJ\n7NMv0PhReU+payF+3JsKgZRXkIaD/hgdh/Lz2Cr5iEOKAes1Rh2j6Wx9BYrY7Sbi\ncOfOXduCKQ04siLr1JGt8ZdsmCRhM7GavgtF+WsZav1kCHotVDsVJD1VOQOIdxMQ\n1i2AFC69JTIl395UtO4MaKxNO8lbTF9lefOjp80q+HailSbkJpOvrRBG1S3k5PmE\n3d9rSpiJtcLimKRfGrdYh68CAwEAAQ==\n-----END PUBLIC KEY-----" > public.pem;
            find './' -type f | grep -E "\.(ps1|sh|conf|yml|txt)$" | xargs -I {} openssl dgst -sha512 -verify public.pem -signature {}.sig {};

        - name: Dlang versions
          id: dlang-versions
          run: |
            cd ~/;
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'dlang_versions='.trim(file_get_contents('./get-dlang/ldc2-version.txt')).PHP_EOL, FILE_APPEND);";

        - name: Installer-cache
          uses: actions/cache@v3
          with:
              path: |
                ~/cache

              key: |
                osx-dlang-${{ steps.dlang-versions.outputs.dlang_versions }}

        - name: Download ldc2
          run: |
            cd ~/;
            sh ~/get-dlang/template/shell/get-ldc2/get-ldc2-osx-${{ matrix.dub-arch }}.sh;

        - name: Show ldc2 version
          run: |
            /Users/runner/ldc2/bin/ldc2 --version;
            /Users/runner/ldc2/bin/dub --version;

        - name: Checkout
          uses: actions/checkout@v3

        - name: ldc2 build library
          run: |
            /Users/runner/ldc2/bin/dub build --force --combined --build-mode=allAtOnce --config=library --arch=${{ matrix.dub-arch }} --build=${{ matrix.build-type }} --compiler=/Users/runner/ldc2/bin/ldc2;

        - name: ldc2 build doc
          run: |
            /Users/runner/ldc2/bin/dub build --force --combined --build-mode=allAtOnce --config=library --arch=${{ matrix.dub-arch }} --build=docs --compiler=/Users/runner/ldc2/bin/ldc2;

        - name: Create OSX archive
          run: |
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }};
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }}/docs;
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }}/include;
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }}/lib;
            cp -r ./docs/* '${{ steps.init-asset-name.outputs.asset_base_name }}/docs/';
            cp -r ./include/* '${{ steps.init-asset-name.outputs.asset_base_name }}/include/';
            cp -r ./lib/* '${{ steps.init-asset-name.outputs.asset_base_name }}/lib/';
            cp './LICENSE' '${{ steps.init-asset-name.outputs.asset_base_name }}/';
            cp './README.md' '${{ steps.init-asset-name.outputs.asset_base_name }}/';
            tar zcvf '${{ steps.init-asset-name.outputs.asset_base_name }}.tar.gz' '${{ steps.init-asset-name.outputs.asset_base_name }}/';

        - name: Upload artifact
          uses: actions/upload-artifact@v3
          with:
              path: |
                ${{ steps.init-asset-name.outputs.asset_base_name }}.tar.gz

        outputs:
            asset_name-x86_64: ${{ steps.init-asset-name.outputs.asset_base_name-x86_64 }}.tar.gz

    Other_Platforms:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                dub-arch: [x86_64]
                build-type: [release-nobounds]

        steps:
        - name: Start Time
          id: start-time
          run: |
            current_time=`php -r "echo (new DateTimeImmutable('now', new DateTimeZone('UTC')))->format('Y-m-d H:i:sP');"`;
            echo $current_time;
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'start-time=${current_time}'.PHP_EOL, FILE_APPEND);";

        - name: Set asset base name
          id: init-asset-name
          run: |
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'asset_base_name='.preg_replace('/^[^\/]+\//u', '', getenv('GITHUB_REPOSITORY')).'-'.str_replace('refs/tags/v', '', getenv('GITHUB_REF')).'-linux-${{ matrix.dub-arch }}'.PHP_EOL, FILE_APPEND);";
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'asset_base_name-x86_64='.preg_replace('/^[^\/]+\//u', '', getenv('GITHUB_REPOSITORY')).'-'.str_replace('refs/tags/v', '', getenv('GITHUB_REF')).'-linux-x86_64'.PHP_EOL, FILE_APPEND);";

        - name: Init get-dlang
          run: |
            mkdir ~/get-dlang;
            cd ~/get-dlang;
            git init;
            git remote add origin 'https://gitlab.com/dokutoku/get-dlang.git';
            git config --local core.sparsecheckout true;
            git config --local core.autocrlf false;

        - name: Fetch get-dlang
          run: |
            cd ~/get-dlang;
            echo '/ldc2-version.txt' >> '.git/info/sparse-checkout';
            echo '/template/ldc2-conf/ldc2-linux-${{ matrix.dub-arch }}.conf' >> '.git/info/sparse-checkout';
            echo '/template/shell/get-ldc2/get-ldc2-linux-${{ matrix.dub-arch }}.sh' >> '.git/info/sparse-checkout';
            echo '/ldc2-version.txt.sig' >> '.git/info/sparse-checkout';
            echo '/template/ldc2-conf/ldc2-linux-${{ matrix.dub-arch }}.conf.sig' >> '.git/info/sparse-checkout';
            echo '/template/shell/get-ldc2/get-ldc2-linux-${{ matrix.dub-arch }}.sh.sig' >> '.git/info/sparse-checkout';
            git fetch --depth=1 origin master;

        - name: Reset get-dlang
          run: |
            cd ~/get-dlang;
            git reset --hard origin/master;

        - name: Show latest commit of get-dlang
          run: |
            cd ~/get-dlang;
            git log -1;

        - name: Show get-dlang hashes
          run: |
            cd ~/get-dlang;
            find './' -type f | grep --regexp=^\./\.git/ --invert-match | xargs sha512sum;

        - name: Verify get-dlang files
          run: |
            cd ~/get-dlang;
            echo -e "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2Mgmj1IMcTe4ZD0nH5Hj\nHTHdcj2S9I8eIpSYl0DdPGzQcLN06eOX+n4MhOo886NQTfBATVAjyGZy500/8JT3\n7wk/we8yRcxAzW18GjUtqiLW8nvSK7tsqPAO8AWJNldYKwM3xTNo0hZW3G5xlkSw\n0ixMlHTffQ2JxPv4xDgBlKUAndzGIPHGhPiPnPbOOS5tOYaWLk3wtXERJpnv4chx\nCNgJc+uY2RTZWQDLCfjJAi4kce+8lkxaIHHSUrRRtjHdTTvPVCg9EWaX53u8MAFf\nf2S9+6+CdrvKe3+IOppI5cfFZtw4rLWqhrg5tVI7JLIVjx2ioZ5cvR6tzNKKGJcw\nD71vrqGWY6BuGRCaVOGAL/grmw3p4EPGPyxmDCsAsWztdWx9EyHNKtI8zfCFEWBx\noGDHjMYUEtF+acVJAhAb7dqgQ8RTebIuQipxlpSLC7BZMHm72SE2TqixIWLSsgAJ\n7NMv0PhReU+payF+3JsKgZRXkIaD/hgdh/Lz2Cr5iEOKAes1Rh2j6Wx9BYrY7Sbi\ncOfOXduCKQ04siLr1JGt8ZdsmCRhM7GavgtF+WsZav1kCHotVDsVJD1VOQOIdxMQ\n1i2AFC69JTIl395UtO4MaKxNO8lbTF9lefOjp80q+HailSbkJpOvrRBG1S3k5PmE\n3d9rSpiJtcLimKRfGrdYh68CAwEAAQ==\n-----END PUBLIC KEY-----" > public.pem;
            find './' -type f | grep -E "\.(ps1|sh|conf|yml|txt)$" | xargs -I {} openssl dgst -sha512 -verify public.pem -signature {}.sig {};

        - name: Dlang versions
          id: dlang-versions
          run: |
            cd ~/;
            php -r "file_put_contents(getenv('GITHUB_OUTPUT'), 'dlang_versions='.trim(file_get_contents('./get-dlang/ldc2-version.txt')).PHP_EOL, FILE_APPEND);";

        - name: Installer-cache
          uses: actions/cache@v3
          with:
              path: |
                ~/cache

              key: |
                other-platforms-dlang-${{ steps.dlang-versions.outputs.dlang_versions }}

        - name: Download ldc2
          run: |
            cd ~/;
            sh ~/get-dlang/template/shell/get-ldc2/get-ldc2-linux-${{ matrix.dub-arch }}.sh;

        - name: Copy ldc2.conf
          run: |
            cp ~/get-dlang/template/ldc2-conf/ldc2-linux-${{ matrix.dub-arch }}.conf ~/ldc2/etc/ldc2.conf;

        - name: Show ldc2 version
          run: |
            /home/runner/ldc2/bin/ldc2 --version;
            /home/runner/ldc2/bin/dub --version;

        - name: Checkout
          uses: actions/checkout@v3

        - name: ldc2 build library
          run: |
            /home/runner/ldc2/bin/dub build --force --combined --build-mode=allAtOnce --config=library --arch=${{ matrix.dub-arch }} --build=${{ matrix.build-type }} --compiler=/home/runner/ldc2/bin/ldc2;

        - name: ldc2 build doc
          run: |
            /home/runner/ldc2/bin/dub build --force --combined --build-mode=allAtOnce --config=library --arch=${{ matrix.dub-arch }} --build=docs --compiler=/home/runner/ldc2/bin/ldc2;

        - name: Create Linux archive
          run: |
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }};
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }}/docs;
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }}/include;
            mkdir ${{ steps.init-asset-name.outputs.asset_base_name }}/lib;
            cp -r ./docs/* '${{ steps.init-asset-name.outputs.asset_base_name }}/docs/';
            cp -r ./include/* '${{ steps.init-asset-name.outputs.asset_base_name }}/include/';
            cp -r ./lib/* '${{ steps.init-asset-name.outputs.asset_base_name }}/lib/';
            cp './LICENSE' '${{ steps.init-asset-name.outputs.asset_base_name }}/';
            cp './README.md' '${{ steps.init-asset-name.outputs.asset_base_name }}/';
            tar zcvf '${{ steps.init-asset-name.outputs.asset_base_name }}.tar.gz' '${{ steps.init-asset-name.outputs.asset_base_name }}/';

        - name: Upload artifact
          if: ${{ (matrix.dub-arch == 'x86_64') }}
          uses: actions/upload-artifact@v3
          with:
              path: |
                ${{ steps.init-asset-name.outputs.asset_base_name }}.tar.gz

        outputs:
            asset_name-x86_64: ${{ steps.init-asset-name.outputs.asset_base_name-x86_64 }}.tar.gz

    Create_release:
        needs: [Windows, MacOS, Other_Platforms]
        name: Create Release

        runs-on: ubuntu-latest

        steps:
        - name: Start Time
          id: start-time
          run: |
            php -r "echo (new DateTimeImmutable('now', new DateTimeZone('UTC')))->format('Y-m-d H:i:sP');";

        - name: Download All artifacts
          uses: actions/download-artifact@v3

        - run: |
            ls './';

        - run: |
            ls './artifact';

        - run: |
            find './artifact' | grep -E ^\./artifact/ | xargs -I {}  mv {} ./;

        - name: Create SHA256SUMS
          run: |
            sha256sum ${{ needs.Windows.outputs.asset_name-x86 }} >> SHA256SUMS;
            sha256sum ${{ needs.Windows.outputs.asset_name-x86_64 }} >> SHA256SUMS;
            sha256sum ${{ needs.MacOS.outputs.asset_name-x86_64 }} >> SHA256SUMS;
            sha256sum ${{ needs.Other_Platforms.outputs.asset_name-x86_64 }} >> SHA256SUMS;

        - name: Create SHA512SUMS
          run: |
            sha512sum ${{ needs.Windows.outputs.asset_name-x86 }} >> SHA512SUMS;
            sha512sum ${{ needs.Windows.outputs.asset_name-x86_64 }} >> SHA512SUMS;
            sha512sum ${{ needs.MacOS.outputs.asset_name-x86_64 }} >> SHA512SUMS;
            sha512sum ${{ needs.Other_Platforms.outputs.asset_name-x86_64 }} >> SHA512SUMS;

        - name: Create SHA512SUMS
          run: |
            openssl sha3-256 ${{ needs.Windows.outputs.asset_name-x86 }} | grep -o -E [a-zA-Z0-9]+$ | xargs -I {} echo {} ' ${{ needs.Windows.outputs.asset_name-x86 }}' >> SHA3-256SUMS;
            openssl sha3-256 ${{ needs.Windows.outputs.asset_name-x86_64 }} | grep -o -E [a-zA-Z0-9]+$ | xargs -I {} echo {} ' ${{ needs.Windows.outputs.asset_name-x86_64 }}' >> SHA3-256SUMS;
            openssl sha3-256 ${{ needs.MacOS.outputs.asset_name-x86_64 }} | grep -o -E [a-zA-Z0-9]+$ | xargs -I {} echo {} ' ${{ needs.MacOS.outputs.asset_name-x86_64 }}' >> SHA3-256SUMS;
            openssl sha3-256 ${{ needs.Other_Platforms.outputs.asset_name-x86_64 }} | grep -o -E [a-zA-Z0-9]+$ | xargs -I {} echo {} ' ${{ needs.Other_Platforms.outputs.asset_name-x86_64 }}' >> SHA3-256SUMS;

        - name: Create SHA3-512SUMS
          run: |
            openssl sha3-512 ${{ needs.Windows.outputs.asset_name-x86 }} | grep -o -E [a-zA-Z0-9]+$ | xargs -I {} echo {} ' ${{ needs.Windows.outputs.asset_name-x86 }}' >> SHA3-512SUMS;
            openssl sha3-512 ${{ needs.Windows.outputs.asset_name-x86_64 }} | grep -o -E [a-zA-Z0-9]+$ | xargs -I {} echo {} ' ${{ needs.Windows.outputs.asset_name-x86_64 }}' >> SHA3-512SUMS;
            openssl sha3-512 ${{ needs.MacOS.outputs.asset_name-x86_64 }} | grep -o -E [a-zA-Z0-9]+$ | xargs -I {} echo {} ' ${{ needs.MacOS.outputs.asset_name-x86_64 }}' >> SHA3-512SUMS;
            openssl sha3-512 ${{ needs.Other_Platforms.outputs.asset_name-x86_64 }} | grep -o -E [a-zA-Z0-9]+$ | xargs -I {} echo {} ' ${{ needs.Other_Platforms.outputs.asset_name-x86_64 }}' >> SHA3-512SUMS;

        # If the tag name has dev in it, then prerelease
        - name: Is prerelease
          id: is_prerelease
          run: |
            if (echo ${{ github.ref }} | grep -o -E [^0-9][\r\n]*$ >/dev/null 2>&1); then        echo '::set-output name=is_prerelease::true';    else        echo '::set-output name=is_prerelease::false';    fi

        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              tag_name: ${{ github.ref }}
              release_name: ${{ github.ref }}
              draft: true
              prerelease: ${{ steps.is_prerelease.outputs.is_prerelease }}

        - name: Upload Windows x86 Release Asset
          id: upload-windows-x86-release-asset
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./${{ needs.Windows.outputs.asset_name-x86 }}
              asset_name: ${{ needs.Windows.outputs.asset_name-x86 }}
              asset_content_type: application/zip

        - name: Upload Windows x86_64 Release Asset
          id: upload-windows-x86_64-release-asset
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./${{ needs.Windows.outputs.asset_name-x86_64 }}
              asset_name: ${{ needs.Windows.outputs.asset_name-x86_64 }}
              asset_content_type: application/zip

        - name: Upload OSX x86_64 Release Asset
          id: upload-osx-x86_64-release-asset
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./${{ needs.MacOS.outputs.asset_name-x86_64 }}
              asset_name: ${{ needs.MacOS.outputs.asset_name-x86_64 }}
              asset_content_type: application/gzip

        - name: Upload Linux-x86_64 Release Asset
          id: upload-linux-x86_64-release-asset
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./${{ needs.Other_Platforms.outputs.asset_name-x86_64 }}
              asset_name: ${{ needs.Other_Platforms.outputs.asset_name-x86_64 }}
              asset_content_type: application/gzip

        - name: Upload SHA256 Release Asset
          id: upload-sha256-release-asset
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./SHA256SUMS
              asset_name: SHA256SUMS
              asset_content_type: text/plain

        - name: Upload SHA512 Release Asset
          id: upload-sha512-release-asset
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./SHA512SUMS
              asset_name: SHA512SUMS
              asset_content_type: text/plain

        - name: Upload SHA3-256 Release Asset
          id: upload-sha3-256-release-asset
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./SHA3-256SUMS
              asset_name: SHA3-256SUMS
              asset_content_type: text/plain

        - name: Upload SHA3-512 Release Asset
          id: upload-sha3-512-release-asset
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./SHA3-512SUMS
              asset_name: SHA3-512SUMS
              asset_content_type: text/plain
